// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/brewmmer/temperature.proto

package brewmmer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetTemperatureRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTemperatureRequest) Reset()         { *m = GetTemperatureRequest{} }
func (m *GetTemperatureRequest) String() string { return proto.CompactTextString(m) }
func (*GetTemperatureRequest) ProtoMessage()    {}
func (*GetTemperatureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_temperature_a26821a08498cfe0, []int{0}
}
func (m *GetTemperatureRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTemperatureRequest.Unmarshal(m, b)
}
func (m *GetTemperatureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTemperatureRequest.Marshal(b, m, deterministic)
}
func (dst *GetTemperatureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTemperatureRequest.Merge(dst, src)
}
func (m *GetTemperatureRequest) XXX_Size() int {
	return xxx_messageInfo_GetTemperatureRequest.Size(m)
}
func (m *GetTemperatureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTemperatureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTemperatureRequest proto.InternalMessageInfo

type GetTemperatureResponse struct {
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Temperature          float64              `protobuf:"fixed64,2,opt,name=Temperature,proto3" json:"Temperature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetTemperatureResponse) Reset()         { *m = GetTemperatureResponse{} }
func (m *GetTemperatureResponse) String() string { return proto.CompactTextString(m) }
func (*GetTemperatureResponse) ProtoMessage()    {}
func (*GetTemperatureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_temperature_a26821a08498cfe0, []int{1}
}
func (m *GetTemperatureResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTemperatureResponse.Unmarshal(m, b)
}
func (m *GetTemperatureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTemperatureResponse.Marshal(b, m, deterministic)
}
func (dst *GetTemperatureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTemperatureResponse.Merge(dst, src)
}
func (m *GetTemperatureResponse) XXX_Size() int {
	return xxx_messageInfo_GetTemperatureResponse.Size(m)
}
func (m *GetTemperatureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTemperatureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTemperatureResponse proto.InternalMessageInfo

func (m *GetTemperatureResponse) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *GetTemperatureResponse) GetTemperature() float64 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func init() {
	proto.RegisterType((*GetTemperatureRequest)(nil), "brewmmer.GetTemperatureRequest")
	proto.RegisterType((*GetTemperatureResponse)(nil), "brewmmer.GetTemperatureResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TemperatureServiceClient is the client API for TemperatureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TemperatureServiceClient interface {
	Get(ctx context.Context, in *GetTemperatureRequest, opts ...grpc.CallOption) (*GetTemperatureResponse, error)
}

type temperatureServiceClient struct {
	cc *grpc.ClientConn
}

func NewTemperatureServiceClient(cc *grpc.ClientConn) TemperatureServiceClient {
	return &temperatureServiceClient{cc}
}

func (c *temperatureServiceClient) Get(ctx context.Context, in *GetTemperatureRequest, opts ...grpc.CallOption) (*GetTemperatureResponse, error) {
	out := new(GetTemperatureResponse)
	err := c.cc.Invoke(ctx, "/brewmmer.TemperatureService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemperatureServiceServer is the server API for TemperatureService service.
type TemperatureServiceServer interface {
	Get(context.Context, *GetTemperatureRequest) (*GetTemperatureResponse, error)
}

func RegisterTemperatureServiceServer(s *grpc.Server, srv TemperatureServiceServer) {
	s.RegisterService(&_TemperatureService_serviceDesc, srv)
}

func _TemperatureService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemperatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemperatureServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/brewmmer.TemperatureService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemperatureServiceServer).Get(ctx, req.(*GetTemperatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TemperatureService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "brewmmer.TemperatureService",
	HandlerType: (*TemperatureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _TemperatureService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/brewmmer/temperature.proto",
}

func init() {
	proto.RegisterFile("api/brewmmer/temperature.proto", fileDescriptor_temperature_a26821a08498cfe0)
}

var fileDescriptor_temperature_a26821a08498cfe0 = []byte{
	// 193 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x8f, 0x31, 0x0b, 0xc2, 0x30,
	0x14, 0x84, 0x89, 0x82, 0x68, 0xba, 0x05, 0xd4, 0xd2, 0xc1, 0x86, 0x4e, 0x9d, 0x12, 0xa8, 0x8b,
	0xff, 0xa0, 0xce, 0xb5, 0xb3, 0xd0, 0xca, 0xb3, 0x14, 0x8c, 0x89, 0xc9, 0xab, 0xfe, 0x7d, 0xa1,
	0x25, 0xb6, 0x88, 0x8e, 0xef, 0xee, 0xe3, 0xee, 0x1e, 0xdd, 0x55, 0xa6, 0x95, 0xb5, 0x85, 0x97,
	0x52, 0x60, 0x25, 0x82, 0x32, 0x60, 0x2b, 0xec, 0x2c, 0x08, 0x63, 0x35, 0x6a, 0xb6, 0xf4, 0x5e,
	0x14, 0x37, 0x5a, 0x37, 0x37, 0x90, 0xbd, 0x5e, 0x77, 0x57, 0x89, 0xad, 0x02, 0x87, 0x95, 0x32,
	0x03, 0x9a, 0x6c, 0xe9, 0x3a, 0x07, 0x2c, 0xc7, 0x88, 0x02, 0x1e, 0x1d, 0x38, 0x4c, 0x90, 0x6e,
	0xbe, 0x0d, 0x67, 0xf4, 0xdd, 0x01, 0x3b, 0xd0, 0xd5, 0x27, 0x25, 0x24, 0x9c, 0xa4, 0x41, 0x16,
	0x89, 0xa1, 0x47, 0xf8, 0x1e, 0x51, 0x7a, 0xa2, 0x18, 0x61, 0xc6, 0x69, 0x30, 0x09, 0x0c, 0x67,
	0x9c, 0xa4, 0xa4, 0x98, 0x4a, 0xd9, 0x99, 0xb2, 0xc9, 0x79, 0x02, 0xfb, 0x6c, 0x2f, 0xc0, 0x8e,
	0x74, 0x9e, 0x03, 0xb2, 0x58, 0xf8, 0xbf, 0xc4, 0xcf, 0xcd, 0x11, 0xff, 0x0f, 0x0c, 0xdb, 0xeb,
	0x45, 0x3f, 0x70, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x14, 0x33, 0x10, 0xa2, 0x42, 0x01, 0x00,
	0x00,
}
